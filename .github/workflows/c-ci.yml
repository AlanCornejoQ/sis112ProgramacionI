name: C CI (src/inc modular)

on:
  push:
    paths:
      - "c/**"
      - ".github/workflows/c-ci.yml"
  pull_request:
    paths:
      - "c/**"
      - ".github/workflows/c-ci.yml"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compilar y probar cada ejercicio modular
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          # Recorre tareas y (examen|examenes)
          for base in c/tareas/** c/examen/** c/examenes/**; do
            # SÃ³lo si existe src/
            if [[ -d "$base/src" ]]; then
              echo "=== Construyendo $base ==="
              mkdir -p "$base/build"

              # Todos los .c bajo src/
              SRC_FILES=( "$base"/src/**/*.c )
              if (( ${#SRC_FILES[@]} == 0 )); then
                echo "No se encontraron .c en $base/src, se omite."
                continue
              fi

              # Incluir headers si hay inc/
              if [[ -d "$base/inc" ]]; then
                gcc "${SRC_FILES[@]}" -I "$base/inc" -O2 -o "$base/build/app"
              else
                gcc "${SRC_FILES[@]}" -O2 -o "$base/build/app"
              fi

              echo "--- Ejecutando $base/build/app ---"
              if [[ -f "$base/expected.txt" ]]; then
                # Ejecuta y compara salida (tolerante a newline final faltante en expected)
                "$base/build/app" > "$base/build/out.txt"
                # Normaliza: asegura newline final en ambos
                sed -e '$a\' "$base/expected.txt" > "$base/build/expected_norm.txt"
                sed -e '$a\' "$base/build/out.txt" > "$base/build/out_norm.txt"
                echo "Comparando salida con expected.txt"
                diff -u "$base/build/expected_norm.txt" "$base/build/out_norm.txt"
              else
                "$base/build/app"
              fi

              echo "=== OK: $base ==="
            fi
          done
